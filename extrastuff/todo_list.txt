### Eye of Sauron is focused on...
* todo: logging

* todo: database of monsters.
* todo: database of items.

### Bugs

* todo: We can target Stationary monsters with confuse...
* Add a repl/str for entity names

-----------------------------------------------------------------------
-----------------------------------------------------------------------

### Easy changes
* todo: Remove color from messages
* todo: Add (0, 0) to directions, but make sure monster doesn't attack itself.
* todo: Add more science lab look to colors, gray/white
* todo: Remove color from message console
* todo: Hero starts with a Notebook?
* todo: Test that tcod calls are up to date

*** Refactoring
* todo: Simplify imports, reduce underscores, less "from" imports.
* todo: Rename ConfusedEnemy -> ConfusedAI


### Mini-Bosses (Relatively easy goals)
* todo: Move one Handler out at a time.
* todo: 'q': To Quaff potions
* todo: 'r': To read scrolls
* todo: Add skeleton tests for other things that are testable...
* todo: Tests for game_map
* todo: Tests for procgen
* todo: Grid movement
* todo: Potion of Extra Healing
* todo: Potion of sleeping
* todo: Replace deprecated tcod.fov functions with updated versions.
* todo: Track monsters kills.
* todo: Death screen/gameover screen, high scores
* todo: Add python typing
* todo: Periodic monster generation
* todo: More advanced monster AI
* todo: More equipment: Jewelry, watches, belts, Helmet, Gloves, Boots, glasses

todo: The Wandering Merchant
	* The Wandering Merchant doesn't really wander
	* he is stationed next to each entry staircase
	* He could be a tile type (if he doesn't move)
	* Or more modern, he could be a NPC.
	* Buy list - doesn't change
	* sell list.

#### Monsters and Items
* todo: Cold Damage
* todo: Fire Damage
* todo: Shock Damage
* todo: Paralysis attack
* todo: Physical damage: bite, hit, touch
* todo: Passive attack (reactive)
* todo: Sticky attack
* todo: Exploding, Self Destruct
* todo: Blinding attack
* todo: Hallucination attack

### Big Bosses (Major and challenging goals)
* todo: Sorted inventory
* todo: Eating functionality
* todo: Add random monster placement generator
* todo: Hallucination
* todo: Blindness

* todo: Add monster info to each monster
* todo: Monsters get random items, weapons, armor
* todo: Death drops
* todo: Dnotation style damage
* todo: up-stairs tile and ability to backtrack
* todo: Graceful exit for going up first level stair.
* todo: Randomized descriptions for items
* todo: Unknown descriptions, and formal descriptions
* todo: multi layered FOV, 2 radius: immediate and far.
* todo: A basic stationary shopkeeper
* todo: Infravision?
* todo: Remember where items were
* todo: Configurable UI, movable panels/inv/etc.
* todo: New input handlers: options, discoveries, credits, help menu, lore.
* todo: Implement mobs of monsters
* todo: Skills
* todo: cursed, uncursed, and blessed

# Phase 2: Making the project FUN!
* todo: Robots
* todo: Genetic Experiments
* todo: Monster Variations (rabid, mini, giant)
* todo: Aliens
* todo: Operatives
* todo: Normal/Real monsters
* todo: Items
* todo: New potions > vials
* todo: Melee weapons
* todo: Ranged weapons
* todo: Ranged monster attacks
* todo: Wands (later to convert to guns)
* todo: Explosives
* todo: Firearms


### Map features:
* todo: Room walls and corners
* todo: Room doors
* todo: Map scrolling
* todo: Gradually increase map size and complexity as levels increase.

* todo: procgen: Trial and Error method.
* todo: procgen: Room-Corridor method.
* todo: procgen: BSP, Binary Space Partition
* todo: procgen: Maze method
* todo: procgen: Grid-based method (how rogue levels were built)

Closets
* todo: Deadend corridors
* todo: Dungeon features: sinks, fountains, chests, secret doors

traps:
* todo: Hidden doors
* todo: hidden corridors
* todo: trip wires
* todo: door traps
* todo: vault traps
* todo: Computer traps

Special rooms
* todo: Panic room
* todo: zoos
* todo: shops

* todo: Some persistent levels, need a separate persistent map parser.
* todo: Better map generation

UI:
* todo: Mouse-driven Menus
* todo: More UI
* todo: High scores

Position struct? or Component...
Renderable Component
Consider the ECS

[] Creating a Binary
[might be done already] 1.6 A* Pathfinding
[] Using Graphical Tiles
[] BSP Dungeon Generator


### Items, Skills, and Abilities
Strength: How strong the character is.
Stamina: How long the character can exert himself over a period of time.
Dexterity: the ability of the character to manipulate objects in the world.
Agility:  movement ability of the character's body as a whole.
Intelligence: the ability of the character to understand artifacts/spell books.
Hit Points (Strength + Stamina): Describes how well the character can take punishment before succumbing to death.

Unarmed Combat Factor (Strength + Agility): Combat using bare hands and feet.
Armed Combat Factor (Strength + Dexterity): Combat using hand held weapons.
Projectile Combat Factor (Dexterity + Intelligence): Combat using projectile weapons.
Magic Combat Factor (Intelligence + Stamina): Magic attack factor; used when casting spells.
Combat Defense Factor (Strength + Agility): Defense factor against non-Magic attacks.
Magic Defense Factor (Agility + Intelligence): Defense against magic attacks.

# Resources and tutorials
* todo: https://www.reddit.com/r/roguelikedev/comments/dsv9lq/roguelike_tutorial_hypothetical_extended_version/
* todo: http://rogueliketutorials.com/tutorials/tcod/
* todo: http://bfnightly.bracketproductions.com/rustbook/
* todo: https://users.freebasic-portal.de/rdc/tutorials.html#mozTocId58846
* todo: http://gamedevgeek.com/tutorials/managing-game-states-in-c/
* todo: https://github.com/aBrydson/fun-with-python-tcod.git
* todo: https://www.reddit.com/r/roguelikedev/comments/al06ab/exercise_ideas_for_libtcod/
* https://www.reddit.com/r/roguelikedev/comments/dsv9lq/roguelike_tutorial_hypothetical_extended_version/
* http://rogueliketutorials.com/tutorials/tcod/
* http://bfnightly.bracketproductions.com/rustbook/
https://docs.python-guide.org/writing/structure/
https://users.freebasic-portal.de/rdc/tutorials.html#mozTocId58846



### Tutorials Completed
* [DONE] http://rogueliketutorials.com/tutorials/tcod/v2/
* DONE: https://www.youtube.com/watch?v=GIF3LaRqgXo (Publishing (Perfect) Python Packages on PyPi)

### Skipped (for now...)
* SKIPPED: Break out actions to separate files in directory. messy...
* SKIPPED: Rename Impossible to ImpossibleException
* SKIPPED: Break input handlers apart to separate files.
* SKIPPED: Remove "that way is blocked for walls."
* SKIPPED: Move main functionality to engine
* SKIPPED: Made the radius of FOV a smaller.
* SKIPPED: Add to pypip library for easier running
* SKIPPED: Reduce range of fireball to 3x3
* SKIPPED: Remove the color module and use tcods built-in colors?,

# WAVE 1
* DONE: , to pickup
* DONE: Ctrl-X for character info
* DONE: Make sure title and messages reflect the LabHack theme.
* DONE: Removed HP from attack msg, instead say "hits"
* DONE: Remove msg for gaining xp.
* DONE: Say "the xxx dies", instead
* DONE: Add ability to view messages after death
* DONE: Remove level-up menu, make random instead.
* DONE: Extend the length of the message box
* DONE: Move message rendering from the MessageLog to rendering_functions.
* DONE: Move game_map rendering to rendering_functions
* DONE: Go through and extract out obvious magic numbers, constants.
* DONE: Convert src and tests files to package import format.
* DONE: Refactor keys and inputs
* DONE: Move Actor to own file
* DONE: Move Item to own file
* DONE: Move GameWorld to own file
* DONE: Move Rect.. to own file
* DONE: Make sure confusion can't make monsters hit themselves.
* DONE: Move MainMenu class to input_handlers.
* DONE: Move message box to top of screen
* DONE: Separate root console
* DONE: Separate map panel
* DONE: Separate msg panel
* DONE: Separate stat panel
* DONE: Change player XP points to standard
* DONE: When monsters die, converted them to Items so we can pick them up!


## WAVE 2
* DONE: Raise the orc damage so it goes through leather armor.

* done: Added a bunch of classic nethack monsters (b, j, e, F)
* done: Potion of Confusion
* done: StationaryAI
* done: ParalyzedAI
* done: Passive AI - for brown/yellow/green/red/disgusting/black mold
* done: Stationary - doesn't move
* done: Potion of paralysis
* DONE: Add LICENSE
* DONE: All Source files to src
* done: Testing for Rectangle
* DONE: Add simple run file
* DONE: Made project more testable, added all items to player inv at start
* DONE: All items are avaiable to generate on any level.
* Bug fixess....
* FIXED: Confusion targeting starts up 5 squares
* FIXED: Monsters bonking into wall appear as "You bonk into ..."

## WAVE 3: Quality of life:
* todo: Separate Engine and Rendering
* done: Renderer holds all consoles
* Each state(inputhandler) has a separate render/draw function, and is passed the current game engine as an argument.
* That way you can segregate code for each screen and keep your render functions small, easy to read, and fast to compile.

* done: Fireball result Targeting needs to be offset +5 y
* done: Fireball targeting is off (square is correct, white dot is not)
* done: Confusion targeting does not work.
* done: Mouse look shows coords
* done: Status bar: health, name, power/defense/level/turns
* done: Add player level to status bar.
* done: Add power, defense, to status bar.
* done: ; to select target (in addition to Enter)
* done: Speed system
* done: Add turns to status bar.
* done: Enhance the status bar
* done: Potion of confusion does not work
* done: Potion of paralysis does not work
* done: Change (E) to Equipped (change window size?)
* done: Rename all EventHandlers to just Handlers
* done: Refactor more of the rendering in the event handlers out
